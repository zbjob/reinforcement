import mindspore
import mindspore.numpy as np
from mindspore_rl.core import MSRL
import mindspore.nn as nn
from mindspore.common.api import ms_function
from mindspore import Tensor
from mindspore.ops import operations as P
from mindspore.ops import composite as C
from mindspore.common.parameter import Parameter, ParameterTuple
from mindspore.common.initializer import initializer
from mindspore.communication.management import init, NCCL_WORLD_COMM_GROUP, get_rank, get_group_size
from mindspore import set_seed
import mindspore.nn.probability.distribution as msd
import time

#pylint disable=E0001
class $fragment_name$(nn.Cell):
    def __init__(self, msrl, rank, episode, duration):
        super($fragment_name$, self).__init__()
        self.msrl = msrl
        self.rank= rank
        self.episode = episode
        self.duration = duration

    @ms_function
    def kernel(self):
        pass
        return self.reward

    def run(self):
        for i in range(self.episode):
            res = self.kernel()


class $fragment_name$(nn.Cell):
    def __init__(self, msrl, rank, episode, duration):
        super($fragment_name$, self).__init__()
        self.msrl = msrl
        self.rank= rank
        self.episode = episode
        self.duration = duration

    @ms_function
    def kernel(self):
        pass 
        return self.training_loss

    def run(self):
        for i in range(self.episode):
            res = self.kernel()
