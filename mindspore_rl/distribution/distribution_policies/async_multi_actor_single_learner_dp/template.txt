"""template for a2c policy"""
from mindspore_rl.agent.learner import Learner
from mindspore_rl.agent.actor import Actor
from mindspore_rl.utils import DiscountedReturn
from mindspore_rl.utils import TensorArray
from mindspore_rl.utils import BatchRead
from mindspore_rl.utils import BatchWrite
import mindspore
from mindspore import nn 
from mindspore import Tensor
from mindspore.common.parameter import ParameterTuple
from mindspore import ops
import mindspore.nn.probability.distribution as msd
from mindspore.ops import operations as P
from mindspore.ops import composite as C
import numpy as np

import collections
import statistics
import tqdm

from mindspore_rl.environment import GymEnvironment
from mindspore_rl.agent.trainer import Trainer
from mindspore_rl.agent import trainer
from mindspore.ops.operations._rl_inner_ops import MuxSend, MuxReceive
from mindspore.communication.management import init, NCCL_WORLD_COMM_GROUP, get_rank, get_group_size
from mindspore import ms_function

class $fragment_name$(nn.Cell):
    def __init__(self, msrl, rank, episode, duration):
        super($fragment_name$, self).__init__()
        self.msrl = msrl
        self.rank= rank
        self.episode = episode
        self.duration = duration

    @ms_function
    def kernel(self):
        pass
        return

    def run(self):
        for i in range(self.episode):
            result = self.kernel()
        return

class $fragment_name$(nn.Cell):
    def __init__(self, msrl, rank, episode, duration):
        super($fragment_name$, self).__init__()
        self.msrl = msrl
        self.rank= rank
        self.episode = episode
        self.duration = duration

    @ms_function
    def kernel(self):
        pass
        return

    def run(self):
        for i in range(self.episode):
            self.kernel()
